From b7b127361dbb680527f5799235a8ab4bfcd9a55f Mon Sep 17 00:00:00 2001
From: kknitin <nitin@elk.audio>
Date: Wed, 29 Sep 2021 15:52:19 +0000
Subject: [PATCH] Mod for rt safe spi

---
 arch/arm/boot/dts/bcm2711-rpi-4-b.dts |  9 ++--
 drivers/spi/spi-bcm2835.c             | 70 ++++++++++++++++++++++-----
 drivers/spi/spi-bcm2835.h             |  7 +++
 drivers/spi/spi.c                     |  3 +-
 include/linux/spi/spi.h               |  1 +
 5 files changed, 72 insertions(+), 18 deletions(-)
 create mode 100644 drivers/spi/spi-bcm2835.h

diff --git a/arch/arm/boot/dts/bcm2711-rpi-4-b.dts b/arch/arm/boot/dts/bcm2711-rpi-4-b.dts
index b5daeee077ec..43c1c078d483 100644
--- a/arch/arm/boot/dts/bcm2711-rpi-4-b.dts
+++ b/arch/arm/boot/dts/bcm2711-rpi-4-b.dts
@@ -274,10 +274,11 @@
 	pinctrl-names = "default";
 	pinctrl-0 = <&spi0_pins &spi0_cs_pins>;
 	cs-gpios = <&gpio 8 1>, <&gpio 7 1>;
+	status = "okay";
 
-	spidev0: spidev@0{
+	/* spidev0: spidev@0{
 		compatible = "spidev";
-		reg = <0>;	/* CE0 */
+		reg = <0>;
 		#address-cells = <1>;
 		#size-cells = <0>;
 		spi-max-frequency = <125000000>;
@@ -285,11 +286,11 @@
 
 	spidev1: spidev@1{
 		compatible = "spidev";
-		reg = <1>;	/* CE1 */
+		reg = <1>;
 		#address-cells = <1>;
 		#size-cells = <0>;
 		spi-max-frequency = <125000000>;
-	};
+	}; */
 };
 
 &gpio {
diff --git a/drivers/spi/spi-bcm2835.c b/drivers/spi/spi-bcm2835.c
index 7b5216461bc4..ac466c2d2819 100644
--- a/drivers/spi/spi-bcm2835.c
+++ b/drivers/spi/spi-bcm2835.c
@@ -30,6 +30,7 @@
 #include <linux/gpio/driver.h> /* FIXME: using chip internals */
 #include <linux/of_irq.h>
 #include <linux/spi/spi.h>
+#include <linux/ipipe_domain.h>
 
 /* SPI register offsets */
 #define BCM2835_SPI_CS			0x00
@@ -597,24 +598,34 @@ static void bcm2835_spi_undo_prologue(struct bcm2835_spi *bs)
  */
 static void bcm2835_spi_dma_rx_done(void *data)
 {
+	struct spi_master *master = data;
 	struct spi_controller *ctlr = data;
 	struct bcm2835_spi *bs = spi_controller_get_devdata(ctlr);
-
-	/* terminate tx-dma as we do not have an irq for it
-	 * because when the rx dma will terminate and this callback
-	 * is called the tx-dma must have finished - can't get to this
-	 * situation otherwise...
-	 */
-	dmaengine_terminate_async(ctlr->dma_tx);
-	bs->tx_dma_active = false;
-	bs->rx_dma_active = false;
-	bcm2835_spi_undo_prologue(bs);
+	struct spi_message *msg = master->cur_msg;
+
+	if (ipipe_current_domain != ipipe_head_domain) {
+		/* terminate tx-dma as we do not have an irq for it
+		* because when the rx dma will terminate and this callback
+		* is called the tx-dma must have finished - can't get to this
+		* situation otherwise...
+		*/
+		dmaengine_terminate_async(ctlr->dma_tx);
+		bs->tx_dma_active = false;
+		bs->rx_dma_active = false;
+		bcm2835_spi_undo_prologue(bs);
+	}
 
 	/* reset fifo and HW */
 	bcm2835_spi_reset_hw(ctlr);
 
-	/* and mark as completed */;
-	complete(&ctlr->xfer_completion);
+	if (ipipe_current_domain == ipipe_head_domain) {
+		spi_set_cs(msg->spi, false);
+		if (msg->complete)
+			msg->complete(msg->context);
+	} else {
+		/* and mark as completed */
+		complete(&master->xfer_completion);
+	}
 }
 
 /**
@@ -681,14 +692,20 @@ static int bcm2835_spi_prepare_sg(struct spi_controller *ctlr,
 		nents = tfr->tx_sg.nents;
 		sgl   = tfr->tx_sg.sgl;
 		flags = tfr->rx_buf ? 0 : DMA_PREP_INTERRUPT;
+		if (ipipe_current_domain == ipipe_head_domain) {
+			flags |= DMA_CTRL_REUSE;
+		}
 	} else {
 		dir   = DMA_DEV_TO_MEM;
 		chan  = ctlr->dma_rx;
 		nents = tfr->rx_sg.nents;
 		sgl   = tfr->rx_sg.sgl;
 		flags = DMA_PREP_INTERRUPT;
+		if (ipipe_current_domain == ipipe_head_domain) {
+			flags |= DMA_CTRL_REUSE;
+		}
 	}
-	/* prepare the channel */
+
 	desc = dmaengine_prep_slave_sg(chan, sgl, nents, dir, flags);
 	if (!desc)
 		return -EINVAL;
@@ -1129,6 +1146,33 @@ static int bcm2835_spi_transfer_one(struct spi_controller *ctlr,
 	return bcm2835_spi_transfer_one_irq(ctlr, spi, tfr, cs, true);
 }
 
+int bcm2835_spi_transfer_one_message(struct spi_master *ctlr,
+				    struct spi_message *msg)
+{
+	struct spi_transfer *xfer;
+	int ret = 0;
+
+	spi_set_cs(msg->spi, true);
+
+	list_for_each_entry(xfer, &msg->transfers, transfer_list) {
+
+		if (xfer->tx_buf || xfer->rx_buf) {
+
+			ret = bcm2835_spi_transfer_one(ctlr, msg->spi, xfer);
+			if (ret < 0) {
+				printk("bcm2835_spi_transfer_one failed\n");
+				return -EINVAL;
+			}
+		} else {
+			if (xfer->len)
+				printk("bcm2835_spi_transfer_one_message: no buffers\n");
+		}
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(bcm2835_spi_transfer_one_message);
+
 static int bcm2835_spi_prepare_message(struct spi_controller *ctlr,
 				       struct spi_message *msg)
 {
diff --git a/drivers/spi/spi-bcm2835.h b/drivers/spi/spi-bcm2835.h
new file mode 100644
index 000000000000..85c6a23d52e0
--- /dev/null
+++ b/drivers/spi/spi-bcm2835.h
@@ -0,0 +1,7 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __SPI_BCM2835_H
+#define __SPI_BCM2835_H
+
+extern int bcm2835_spi_transfer_one_message(struct spi_master *ctlr,
+				    struct spi_message *msg);
+#endif
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index f9453df24b86..443ce5bbc99e 100644
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -785,7 +785,7 @@ int spi_register_board_info(struct spi_board_info const *info, unsigned n)
 
 /*-------------------------------------------------------------------------*/
 
-static void spi_set_cs(struct spi_device *spi, bool enable)
+void spi_set_cs(struct spi_device *spi, bool enable)
 {
 	if (spi->mode & SPI_CS_HIGH)
 		enable = !enable;
@@ -813,6 +813,7 @@ static void spi_set_cs(struct spi_device *spi, bool enable)
 		spi->controller->set_cs(spi, !enable);
 	}
 }
+EXPORT_SYMBOL_GPL(spi_set_cs);
 
 #ifdef CONFIG_HAS_DMA
 int spi_map_buf(struct spi_controller *ctlr, struct device *dev,
diff --git a/include/linux/spi/spi.h b/include/linux/spi/spi.h
index acd91300a4ab..05a3fef8ee50 100644
--- a/include/linux/spi/spi.h
+++ b/include/linux/spi/spi.h
@@ -1008,6 +1008,7 @@ extern int spi_async(struct spi_device *spi, struct spi_message *message);
 extern int spi_async_locked(struct spi_device *spi,
 			    struct spi_message *message);
 extern int spi_slave_abort(struct spi_device *spi);
+extern void spi_set_cs(struct spi_device *spi, bool enable);
 
 static inline size_t
 spi_max_message_size(struct spi_device *spi)
-- 
2.17.1

